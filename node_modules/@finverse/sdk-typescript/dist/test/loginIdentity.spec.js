"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_mock_adapter_1 = require("axios-mock-adapter");
const axios_1 = require("axios");
const config_1 = require("./config");
const __1 = require("..");
const api_1 = require("../api");
const loginIdentity_1 = require("./responses/loginIdentity");
const loginIdentityToken_1 = require("./responses/loginIdentityToken");
const chai_1 = require("chai");
var FinalStatus;
(function (FinalStatus) {
    FinalStatus["ERROR"] = "ERROR";
    FinalStatus["DATA_RETRIEVAL_PARTIALLY_SUCCESSFUL"] = "DATA_RETRIEVAL_PARTIALLY_SUCCESSFUL";
    FinalStatus["DATA_RETRIEVAL_COMPLETE"] = "DATA_RETRIEVAL_COMPLETE";
})(FinalStatus || (FinalStatus = {}));
describe('Login Identity', function () {
    let mock;
    beforeEach(() => {
        mock = new axios_mock_adapter_1.default(axios_1.default);
        mock.onGet(`${config_1.config.apiHost}/login_identity`).reply(200, (0, loginIdentity_1.getLoginIdentity)());
    });
    it('Obtain login identity', function () {
        return __awaiter(this, void 0, void 0, function* () {
            // Make Request
            const configuration = new __1.Configuration({ basePath: config_1.config.apiHost, accessToken: loginIdentityToken_1.loginIdentityToken.access_token });
            const got = yield new api_1.LoginIdentityApi(configuration).getLoginIdentity();
            // Expect
            // This is the institution information
            (0, chai_1.expect)(got.data.institution).to.be.ok;
            // This is the login identity events
            (0, chai_1.expect)(got.data.login_identity).to.be.ok;
        });
    });
    it('Poll login identity until ready', function () {
        return __awaiter(this, void 0, void 0, function* () {
            // Make Request
            const configuration = new __1.Configuration({ basePath: config_1.config.apiHost, accessToken: loginIdentityToken_1.loginIdentityToken.access_token });
            let got;
            for (let i = 0; i < 20; i++) {
                got = yield new api_1.LoginIdentityApi(configuration).getLoginIdentity();
                const loginIdentityStatus = got.data.login_identity.status;
                if (loginIdentityStatus === FinalStatus.ERROR ||
                    loginIdentityStatus === FinalStatus.DATA_RETRIEVAL_COMPLETE ||
                    loginIdentityStatus === FinalStatus.DATA_RETRIEVAL_PARTIALLY_SUCCESSFUL) {
                    break;
                }
                yield new Promise((resolve) => setTimeout(resolve, 3000));
            }
            // Expect
            // This is the institution information
            (0, chai_1.expect)(got.data.institution).to.be.ok;
            // This is the login identity events
            (0, chai_1.expect)(got.data.login_identity).to.be.ok;
        });
    });
    afterEach(() => {
        mock.restore();
    });
});
