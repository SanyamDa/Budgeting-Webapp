"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_mock_adapter_1 = require("axios-mock-adapter");
const axios_1 = require("axios");
const config_1 = require("./config");
const __1 = require("..");
const api_1 = require("../api");
const linkToken_1 = require("./responses/linkToken");
const customerToken_1 = require("./responses/customerToken");
const loginIdentityToken_1 = require("./responses/loginIdentityToken");
const chai_1 = require("chai");
describe('Link', function () {
    let mock;
    beforeEach(() => {
        mock = new axios_mock_adapter_1.default(axios_1.default);
    });
    it('Obtain link token and link url to launch Finverse Link UI', function () {
        return __awaiter(this, void 0, void 0, function* () {
            // Variables
            const url = `${config_1.config.apiHost}/link/token`;
            const requestBody = {
                client_id: config_1.config.clientId,
                grant_type: config_1.grantType.CLIENT_CREDENTIALS,
                user_id: 'userId', // Reference back to your system userId, finverse does not use this
                redirect_uri: config_1.config.redirectURI,
                state: 'state', // This will be sent in the redirectUri callback, can be used to identify the state
                response_mode: 'form_post',
                response_type: 'code',
                link_mode: 'iframe',
            };
            // Mocking
            mock.onPost(url, requestBody).reply(200, linkToken_1.linkToken);
            // Make Request
            const configuration = new __1.Configuration({ basePath: config_1.config.apiHost, accessToken: customerToken_1.customerToken.access_token });
            const got = yield new api_1.CustomerApi(configuration).generateLinkToken(requestBody);
            // Expect
            // The link url is used to initialize Finverse Link, when linking is finished, a cose is sent to the redirectUri
            // This is used to exchange for loginIdentity Token
            (0, chai_1.expect)(got.data.link_url).to.equal(linkToken_1.linkToken.link_url);
        });
    });
    it('Obtain login identity token', function () {
        return __awaiter(this, void 0, void 0, function* () {
            // Variables
            const url = `${config_1.config.apiHost}/auth/token`;
            const requestBody = new URLSearchParams({
                grant_type: config_1.grantType.AUTHORIZATION_CODE,
                code: 'obtainAfterLink',
                client_id: config_1.config.clientId,
                redirect_uri: config_1.config.redirectURI,
            });
            // Mocking
            // When Finverse link is done, obtain the code and use it to exchange for login identity access token
            mock.onPost(url, requestBody.toString()).reply(200, loginIdentityToken_1.loginIdentityToken);
            // Make Request
            const configuration = new __1.Configuration({ basePath: config_1.config.apiHost, accessToken: customerToken_1.customerToken.access_token });
            const got = yield new api_1.LinkApi(configuration).token(api_1.TokenGrantTypeEnum.AuthorizationCode, 'obtainAfterLink', config_1.config.clientId, config_1.config.redirectURI);
            // Expect
            // The loginIdentityToken can be used to retrieve data
            (0, chai_1.expect)(got.data.access_token).to.equal(loginIdentityToken_1.loginIdentityToken.access_token);
        });
    });
    afterEach(() => {
        mock.restore();
    });
});
