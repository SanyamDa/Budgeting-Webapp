"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_mock_adapter_1 = require("axios-mock-adapter");
const axios_1 = require("axios");
const config_1 = require("./config");
const __1 = require("..");
const api_1 = require("../api");
const customerToken_1 = require("./responses/customerToken");
const paymentInstruction_1 = require("./responses/paymentInstruction");
const chai_1 = require("chai");
describe('PaymentInstruction', function () {
    let mock;
    before(() => {
        mock = new axios_mock_adapter_1.default(axios_1.default);
    });
    it('Create paymentInstruction', function () {
        return __awaiter(this, void 0, void 0, function* () {
            mock.onPost(`${config_1.config.apiHost}/payments/instruction`).reply(200, (0, paymentInstruction_1.createPaymentInstruction)());
            const configuration = new __1.Configuration({ basePath: config_1.config.apiHost, accessToken: customerToken_1.customerToken.access_token });
            const paymentInstruction = {
                type: "DEBIT_AUTHORIZATION",
                user_id: "customer_user1",
                frequency: "MONTHLY",
                start_date: "2022-04-01",
                end_date: "2022-12-01",
                amount: 1000,
                currency: "PHP",
                recipient_name: "HOMECREDIT",
                recipient_account_id: "Recipient Account Id",
                sender_name: "Sender Name",
                sender_account_id: "LOAN102345",
                remarks: "HOME CREDIT REPAYMENT"
            };
            const createPaymentInstructionResponse = yield new api_1.CustomerApi(configuration).createPaymentInstruction(paymentInstruction);
            (0, chai_1.expect)(createPaymentInstructionResponse.data.payment_instruction_id).to.be.ok;
        });
    });
    it('Get paymentInstruction', function () {
        return __awaiter(this, void 0, void 0, function* () {
            mock.onGet(`${config_1.config.apiHost}/payments/instruction/stub_payment_instruction_id`).reply(200, (0, paymentInstruction_1.getPaymentInstruction)());
            const configuration = new __1.Configuration({ basePath: config_1.config.apiHost, accessToken: customerToken_1.customerToken.access_token });
            const getPaymentInstructionResponse = yield new api_1.CustomerApi(configuration).getPaymentInstruction("stub_payment_instruction_id");
            (0, chai_1.expect)(getPaymentInstructionResponse.data.payment_instruction).to.be.ok;
        });
    });
    after(() => {
        mock.restore();
    });
});
