"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_mock_adapter_1 = require("axios-mock-adapter");
const axios_1 = require("axios");
const config_1 = require("./config");
const __1 = require("..");
const customerToken_1 = require("./responses/customerToken");
const chai_1 = require("chai");
describe('Authenticate', function () {
    let mock;
    before(() => {
        mock = new axios_mock_adapter_1.default(axios_1.default);
        mock
            .onPost(`${config_1.config.apiHost}/auth/customer/token`, {
            client_id: config_1.config.clientId,
            client_secret: config_1.config.clientSecret,
            grant_type: config_1.grantType.CLIENT_CREDENTIALS,
        })
            .reply(200, customerToken_1.customerToken);
    });
    it('Get customer access token', function () {
        return __awaiter(this, void 0, void 0, function* () {
            // Make Request
            const configuration = new __1.Configuration({ basePath: config_1.config.apiHost });
            const got = yield new __1.PublicApi(configuration).generateCustomerAccessToken({
                client_id: config_1.config.clientId,
                client_secret: config_1.config.clientSecret,
                grant_type: config_1.grantType.CLIENT_CREDENTIALS,
            });
            // Expect
            (0, chai_1.expect)(got.data.access_token).to.equal(customerToken_1.customerToken.access_token);
        });
    });
    after(() => {
        mock.restore();
    });
});
