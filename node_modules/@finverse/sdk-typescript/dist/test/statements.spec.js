"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_mock_adapter_1 = require("axios-mock-adapter");
const axios_1 = require("axios");
const config_1 = require("./config");
const __1 = require("..");
const api_1 = require("../api");
const loginIdentityToken_1 = require("./responses/loginIdentityToken");
const statement_1 = require("./responses/statement");
const chai_1 = require("chai");
describe('Statements', function () {
    let mock;
    before(() => {
        mock = new axios_mock_adapter_1.default(axios_1.default);
    });
    it('Get statements', function () {
        return __awaiter(this, void 0, void 0, function* () {
            // Get all statements
            mock.onGet(`${config_1.config.apiHost}/statements`).reply(200, (0, statement_1.getStatements)());
            const configuration = new __1.Configuration({ basePath: config_1.config.apiHost, accessToken: loginIdentityToken_1.loginIdentityToken.access_token });
            const gotStatements = yield new api_1.LoginIdentityApi(configuration).getStatements();
            (0, chai_1.expect)(gotStatements.data.statements).to.be.ok;
            // Get link to statement
            // Assuming there is only one statement
            const statementId = gotStatements.data.statements[0].id;
            mock.onGet(`${config_1.config.apiHost}/statements/${statementId}`).reply(200, (0, statement_1.getStatementAsBuffer)());
            const gotStatementLink = yield new api_1.LoginIdentityApi(configuration).getStatement(statementId);
            (0, chai_1.expect)(gotStatementLink.data).to.be.ok;
        });
    });
    after(() => {
        mock.restore();
    });
});
